{"version":3,"sources":["components/fetchApi.js","components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["APIKEY","rest","getCity","city","a","axios","get","then","data","result","console","log","SearchBar","React","lazy","Weather","useState","value","setValue","weather","setWeather","info","setInfo","handleChange","useCallback","e","target","handleClick","keyPress","event","key","size","clr","ls","fontSize","margin","padding","color","letterSpacing","fontFamily","useEffect","undefined","change","click","style","wh","Fragment","Suspense","fallback","press","charAt","toUpperCase","slice","name","description","src","icon","main","temp","toFixed","sys","country","wind","speed","flex","App","textAlign","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAEaA,EAAS,mCAKTC,GAFG,2DAFI,GAEJ,wBAA2ED,GAE1E,iBAAaA,EAAb,oBACJE,EAAO,uCAAG,WAAMC,GAAN,eAAAC,EAAA,+EAEEC,IAAMC,IAJZ,oDAIsBH,EAAOF,GAC3CM,MAAK,qBAAEC,QAHW,cAEbC,EAFa,yBAKZA,GALY,gCASnBC,QAAQC,IAAI,aATO,yDAAH,sD,QCHdC,EAAYC,IAAMC,MAAK,kBAAM,sDAgFpBC,EA9EC,WAAO,IAAD,EACMC,mBAAS,IADf,mBACbC,EADa,KACNC,EADM,OAEUF,mBAAS,MAFnB,mBAEbG,EAFa,KAEJC,EAFI,OAGIJ,mBAAS,UAHb,mBAGbK,EAHa,KAGPC,EAHO,KAIpBZ,QAAQC,IAAI,WAEZ,IAAMY,EAAeC,uBAAY,SAAAC,GAC/BP,EAASO,EAAEC,OAAOT,SACjB,IAGIU,EAAcH,uBAAY,WAC/BF,EAAQL,GACRC,EAAS,MAER,CAACD,IAEEW,EAAWJ,uBAAY,SAAAK,GACV,UAAdA,EAAMC,MACPR,EAAQL,GACRC,EAAS,OAEV,CAACD,IAEEc,EAAM,SAACA,EAAMC,EAAKC,GACtB,MAAO,CACLC,SAAUH,EAAO,KACjBI,OAAQ,EACRC,QAAS,EACTC,MAAOL,EACPM,cAAeL,EAAK,KACpBM,WAAY,0BAWjB,GAPCC,qBAAU,WACRtC,EAAQmB,GACPd,MAAK,SAACC,GAAD,OAAUY,EAAWZ,QAE1B,CAACa,SAGUoB,IAAZtB,EAEF,OACE,gCACE,cAACP,EAAD,CAAWK,MAAOA,EAAOyB,OAAQnB,EAAcoB,MAAOhB,IACtD,oBAAGiB,MAAOb,EAAK,GAAI,OAAnB,yCAAwDV,QAM9D,IAAMwB,EAAiB,OAAZ1B,EACT,cAAC,IAAM2B,SAAP,yBAEA,eAAC,IAAMA,SAAP,WACG,cAAC,IAAMC,SAAP,CAAgBC,SAAU,2CAA1B,SACA,cAACpC,EAAD,CAAWqC,MAAOrB,EAAUX,MAAOA,EAAMiC,OAAO,GAAGC,cAAgBlC,EAAMmC,MAAM,GAAIV,OAAQnB,EAAcoB,MAAOhB,MAE3G,mBAAGiB,MAAOb,EAAK,GAAI,QAAnB,SAA6BZ,EAAQkC,OACrC,oBAAGT,MAAOb,EAAK,GAAI,QAAS,GAA5B,UAAiCZ,EAAQA,QAAQ,GAAGmC,YAApD,OACA,qBAAKC,IAAK,mCAAqCpC,EAAQA,QAAQ,GAAGqC,KAAO,SACzE,oBAAGZ,MAAOb,EAAK,GAAI,SAAnB,WAA0D,WAA1BZ,EAAQsC,KAAKC,KAAO,KAAkBC,QAAQ,GAA9E,YACA,oBAAGf,MAAOb,EAAK,IAAf,sBAA8BZ,EAAQyC,IAAIC,WAC1C,8CAAiB1C,EAAQ2C,KAAKC,MAAQ,KAAKJ,QAAQ,GAAnD,cAKN,OAEE,qBAAKf,MAAOoB,OAAZ,SAAoBnB,KC5DXoB,MAff,WAKE,OACE,sBAAKrB,MALQ,CACbsB,UAAW,UAIX,UACE,8BACE,+CAEF,cAAC,EAAD,QCFSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9D,MAAK,YAAkD,IAA/C+D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.96ff959f.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const APIKEY = '7e974f5b6007509e9668715d15b66790';\nexport const city = '';\n\nexport const URL = `api.openweathermap.org/data/2.5/forecast/daily?q=${city}&cnt=4&appid=${APIKEY}`;\nexport const url = 'http://api.openweathermap.org/data/2.5/weather?q=';\nexport const rest = `&appid=${APIKEY}&units=imperial`;\nexport const getCity = async(city) => {\n  try {\n    const result = await axios.get(url + city + rest)\n    .then(({data}) => data)\n\n    return result;\n  }\n\n  catch(err) {\n    console.log('Try again')\n  }\n}","/* eslint-disable jsx-a11y/alt-text */\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { getCity } from './fetchApi';\nimport { flex } from './styles.css';\n\nconst SearchBar = React.lazy(() => import('./SearchBar'))\n\nconst Weather = () => {\n  const [value, setValue] = useState('');\n  const [weather, setWeather] = useState(null);\n  const [info, setInfo] = useState('moscow');\n  console.log('weather')\n  \n  const handleChange = useCallback(e =>{\n    setValue(e.target.value)\n  }, [])\n  \n  \n   const handleClick = useCallback(() => {\n    setInfo(value)\n    setValue('')\n    \n  }, [value]) \n\n  const keyPress = useCallback(event => {\n    if(event.key === 'Enter') {\n      setInfo(value)\n      setValue('')\n    }\n  }, [value])\n\n  const size =(size, clr, ls) => {\n    return {\n      fontSize: size + 'px',\n      margin: 0,\n      padding: 0,\n      color: clr,\n      letterSpacing: ls + 'px',\n      fontFamily: 'Helvetica, sans-serif'\n    }\n  }\n\n  useEffect(() => {\n    getCity(info)\n    .then((data) => setWeather(data))\n    \n  }, [info])\n\n\n if(weather === undefined) {\n\n  return( \n    <div>\n      <SearchBar value={value} change={handleChange} click={handleClick} />\n      <p style={size(20, 'red')}>Oops.. there isnt city like {info}</p>\n       \n    </div>\n  )\n}\n\nconst wh = weather === null ? (\n  <React.Fragment>Loading...</React.Fragment>\n) : (\n  <React.Fragment>\n     <React.Suspense fallback={<p>Loading...</p>}>\n     <SearchBar press={keyPress} value={value.charAt(0).toUpperCase() + value.slice(1)} change={handleChange} click={handleClick} />\n     </React.Suspense>\n          <p style={size(35, 'blue')}>{weather.name}</p>\n          <p style={size(13, 'white', 1)}>{weather.weather[0].description} </p>\n          <img src={\"http://openweathermap.org/img/w/\" + weather.weather[0].icon + \".png\"} />\n          <p style={size(40, 'white')}>{((weather.main.temp - 32) * 0.55555555).toFixed(2)} &deg;C</p>\n          <p style={size(40)}>Country: {weather.sys.country}</p>\n          <p>Wind Speed: {(weather.wind.speed / 1.6).toFixed(2)} km/h</p>\n  </React.Fragment>\n  \n    )\n\n    return ( \n       \n      <div style={flex}>{ wh }</div>\n    )\n\n   \n  }\n  \nexport default Weather;","import React from 'react';\nimport Weather from './components/Weather';\nimport Background from './backw.jpg';\n\nfunction App() {\n  const styles = {\n    textAlign: 'center',\n    \n  }\n  return (\n    <div style={styles}>\n      <div>\n        <h1>Weather App</h1>\n      </div>\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}